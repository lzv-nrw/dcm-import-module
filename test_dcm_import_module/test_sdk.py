"""
Test module for the package `dcm-import-module-sdk`.
"""

from time import sleep

import pytest
import dcm_import_module_sdk

from dcm_import_module import app_factory


@pytest.fixture(name="app")
def _app(testing_config):
    testing_config.ORCHESTRATION_AT_STARTUP = True
    return app_factory(testing_config(), as_process=True)


@pytest.fixture(name="default_sdk", scope="module")
def _default_sdk():
    return dcm_import_module_sdk.DefaultApi(
        dcm_import_module_sdk.ApiClient(
            dcm_import_module_sdk.Configuration(host="http://localhost:8080")
        )
    )


@pytest.fixture(name="import_sdk", scope="module")
def _import_sdk():
    return dcm_import_module_sdk.ImportApi(
        dcm_import_module_sdk.ApiClient(
            dcm_import_module_sdk.Configuration(host="http://localhost:8080")
        )
    )


def test_default_ping(
    default_sdk: dcm_import_module_sdk.DefaultApi, testing_config, run_service
):
    """Test default endpoint `/ping-GET`."""

    run_service(from_factory=lambda: app_factory(testing_config()), port=8080)

    response = default_sdk.ping()

    assert response == "pong"


def test_default_status(
    default_sdk: dcm_import_module_sdk.DefaultApi, testing_config, run_service
):
    """Test default endpoint `/status-GET`."""

    run_service(from_factory=lambda: app_factory(testing_config()), port=8080)

    response = default_sdk.get_status()

    assert response.ready


def test_default_identify(
    default_sdk: dcm_import_module_sdk.DefaultApi, run_service, testing_config
):
    """Test default endpoint `/identify-GET`."""

    run_service(from_factory=lambda: app_factory(testing_config()), port=8080)

    response = default_sdk.identify()

    # remove None-values in plugin-arg 'default'- or 'example'-fields
    # falsely generated by the sdk (https://zivgitlab.uni-muenster.de/ULB/lzvnrw/team-se/dcm-import-module-api/-/issues/48)
    response_dict = response.to_dict()

    def remove_nones(dict_: dict) -> None:
        if "default" in dict_ and dict_["default"] is None:
            del dict_["default"]
        if "example" in dict_ and dict_["example"] is None:
            del dict_["example"]
        for p in dict_.get("properties", {}).values():
            remove_nones(p)

    for plugin in response_dict["configuration"]["plugins"].values():
        remove_nones(plugin["signature"])

    assert response_dict == testing_config().CONTAINER_SELF_DESCRIPTION


def test_import_report(
    import_sdk: dcm_import_module_sdk.ImportApi,
    run_service,
    testing_config,
    fake_builder_service,
):
    """Test endpoints `/import/ies-POST` and `/report-GET`."""

    run_service(from_factory=lambda: app_factory(testing_config()), port=8080)
    run_service(app=fake_builder_service, port=8083)

    submission = import_sdk.import_ies(
        {
            "import": {
                "plugin": "demo",
                "args": {"number": 1, "randomize": False},
            }
        }
    )

    while True:
        try:
            report = import_sdk.get_report(token=submission.value)
            break
        except dcm_import_module_sdk.exceptions.ApiException as e:
            assert e.status == 503
            sleep(0.1)

    assert report.data.success
    assert len(report.data.ies) == 1
    assert (
        testing_config().FS_MOUNT_POINT / report.data.ies["ie0"].path
    ).is_dir()


def test_import_report_404(
    import_sdk: dcm_import_module_sdk.ImportApi, testing_config, run_service
):
    """Test build endpoint `/report-GET` without previous submission."""

    run_service(from_factory=lambda: app_factory(testing_config()), port=8080)

    with pytest.raises(dcm_import_module_sdk.rest.ApiException) as exc_info:
        import_sdk.get_report(token="some-token")
    assert exc_info.value.status == 404
